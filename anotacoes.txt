Descobrindo todos os parâmetros do request
Para ler todos os parâmetros do request basta acessar o método getParameterMap do request.

  Map<String,Object> parametros = request.getParameterMap();
  for(String parametro:parametros.keySet()) {
    // faca algo com o parametro
  }


  Context listener
Sabemos que podemos executar código no momento que uma Servlet ou um filtro são inicializados através dos métodos init de cada um deles. Mas e se quisermos executar algo no início da aplicação Web (do contexto Web), independente de termos ou não Servlet e filtros e do número deles?

Para isso existem os context listeners. Você pode escrever uma classe Java com métodos que serão chamados automaticamente no momento que seu contexto for iniciado e depois desligado. Basta implementar a interface ServletContextListener e usar a tag <listener> no web.xml para configurá-la.

Por exemplo:

  public class MeuListener implements ServletContextAttributeListener {
      public void contextInitialized(ServletContextEvent event) {
      System.out.println("Contexto iniciado...");
    }

      public void contextDestroyed(ServletContextEvent event) {
      System.out.println("Contexto desligado...");
      }
  }
E depois no XML:

  <listener>
      <listener-class>pacote.MeuListener</listener-class>
  </listener>

  O ServletContext e o escopo de aplicação
As aplicações Web em Java têm 3 escopos possíveis. Já vimos e usamos dois deles: o de request e o de sessão. Podemos colocar um atributo no request com request.setAttribute(..,..) e ele estará disponível para todo o request (desde a Action até o JSP, os filtros etc).

Da mesma forma, podemos pegar a HttpSession e colocar um atributo com session.setAttribute(..,..) e ela estará disponível na sessão daquele usuário através de vários requests.

O terceiro escopo é um escopo global, onde os objetos são compartilhados na aplicação inteira, por todos os usuários em todos os requests. É o chamado escopo de aplicação, acessível pelo ServletContext.

Podemos, em uma Servlet, setar algum atributo usando:

  getServletContext().setAttribute("nomeGlobal", "valor");
Depois, podemos recuperar esse valor com:

  Object valor = getServletContext().getAttribute("nomeGlobal");
Um bom uso é compartilhar configurações globais da aplicação, como por exemplo usuário e senha de um banco de dados, ou algum objeto de cache compartilhado etc. Você pode, por exemplo, inicializar algum objeto global usando um ServletContextListener e depois disponibilizá-lo no ServletContext para o resto da aplicação acessar.


Outros listeners
Há ainda outros listeners disponíveis na API de Servlets para capturar outros tipos de eventos:

HttpSessionListener - provê métodos que executam quando uma sessão é criada (sessionCreated), destruída (sessionDestroyed);

ServletContextAttributeListener - permite descobrir quando atributos são manipulados no ServletContext com os métodos attributeAdded, attributeRemoved e attributeReplaced;

ServletRequestAttributeListener - tem os mesmos métodos que o ServletContextAttributeListener mas executa quando os atributos do request são manipulados;

HttpSessionAttributeListener - tem os mesmos métodos que o ServletContextAttributeListener mas executa quando os atributos da HttpSession são manipulados;

ServletRequestListener - permite executar códigos nos momentos que um request chega e quando ele acaba de ser processado (métodos requestDestroyed e requestInitialized);

Outros menos usados: HttpSessionActivationListener e HttpSessionBindingListener.

A configuração de qualquer um desses listeners é feita com a tag <listener> como vimos acima. É possível inclusive que uma mesma classe implemente várias das interfaces de listeners mas seja configurada apenas uma vez o web.xml.


<!-- No arquivo web.xml-->

<!-- No posso definir valores aqui e recupera-los nas servlets -->
	<context-param>
		<param-name>nome</param-name>
		<param-value>param</param-value>
	</context-param>


		<!-- quando subir o tomcat instancie esse listener? Esse cara fica ouvindo 
		e quando alguém pedir um objeto BeanManager o contexto (tomcat) vai saber 
		criar (vai no arquivo de contexto e lá ensina a criar o objeto) -->
		
	<listener>
		<listener-class>org.jboss.weld.environment.servlet.Listener</listener-class>
	</listener>

	<resource-env-ref>
		<resource-env-ref-name>BeanManager</resource-env-ref-name>
		<resource-env-ref-type>javax.enterprise.inject.spi.BeanManager</resource-env-ref-type>
	</resource-env-ref>

	<!-- No arquivo context.xml-->
<?xml version="1.0" encoding="UTF-8"?>
<!-- 
BeanManager precisa existir dentro do container, esse objeto pe importante para o CDI  
A especificação pede que esse objeto esteja acessível via JNDI
Dado um nome o container instancia esse objeto.
Quando alguém solicitar um objeto BeanManager o tom cat vai criar esse objeto.
BeanManager é um recurso e quem sabe criar esse tipo:
javax.enterprise.inject.spi.BeanManager (de objeto) é o 
org.jboss.weld.resources.ManagerObjectFactory 

O Tomcat possui um JNDI somente leitura, assim o Weld não pode vincular 
	automaticamente a extensão SPI do BeanManager. Para vincular o BeanManager 
	ao JNDI, você deve preencher META-INF/context.xml na raiz web com o seguinte 
	conteúdo: 
	
-->
	
<Context>
	
	<!-- disables storage of sessions across restarts -->
	<Manager pathname="" />
	
	<Resource name="BeanManager"
		auth="Container"
		type="javax.enterprise.inject.spi.BeanManager"
		factory="org.jboss.weld.resources.ManagerObjectFactory" />
</Context>

<!-- beans.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
		http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"
	version="1.2" bean-discovery-mode="all">

	<!-- bean-discovery-mode="all" diz quem pode ser injetado todas as classes, 
		apenas as anotadas ou nenhum -->

</beans>

